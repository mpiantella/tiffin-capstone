AWSTemplateFormatVersion: "2010-09-09"
Description: Remote-Brilliance-Tiffin

Parameters:
  ApiName:
    Type: String
    Default: Remote-Brilliance
  AppSyncRole:
    Type: String
    Default: arn:aws:iam::762379509945:role/service-role/appsync-ds-ddb-dlathc-RemoteBrillianceTabl
  AppSyncPushToCloudWatchLogs:
    Type: String
    Default: arn:aws:iam::762379509945:role/AppSyncPushToCloudWatchLogs
  RBS3Bucket:
    Type: String
    Default: remote-brilliance-cloud
  EnableDynamoDBTableEncryption:
    Type: String
    Description: This is used to specify if the DynamoDB tables should be encrypted.
    Default: true
    AllowedValues: [true, false]
  CognitoUserPoolId:
    Type: String
    Default: us-east-1_zFDe35WRr
  dynamoDBTableBillingMode:
    Type: String
    Description: This is used to configure the billing mode on the DynamoDB tables.
    Default: PAY_PER_REQUEST

Resources:
  # Data Source Resources
  Activity:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      SSESpecification:
        SSEEnabled: { "Ref": "EnableDynamoDBTableEncryption" }

  Job:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      SSESpecification:
        SSEEnabled: { "Ref": "EnableDynamoDBTableEncryption" }

  User:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      SSESpecification:
        SSEEnabled: { "Ref": "EnableDynamoDBTableEncryption" }

  # AppSync API
  AppSyncApiKey:
    Type: AWS::AppSync::ApiKey
    Properties:
      Description: "Basic OpenWeatherMap API Key"
      Expires: 1640995200 # Jan 24 2022
      ApiId: !GetAtt RemoteBrillianceAppSync.ApiId

  RemoteBrillianceAppSync:
    Type: AWS::AppSync::GraphQLApi
    Description: "Remote Brilliance Endpoints"
    Properties:
      Name: !Sub ${ApiName}
      AuthenticationType: "API_KEY"
      # AuthenticationType: "AMAZON_COGNITO_USER_POOLS"
      # UserPoolConfig:
      #   UserPoolId: !Ref UserPoolClient
      #   AwsRegion: !Sub ${AWS::Region}
      #   DefaultAction: "ALLOW"
      LogConfig:
        CloudWatchLogsRoleArn: !Sub ${AppSyncPushToCloudWatchLogs}
        ExcludeVerboseContent: False
        FieldLogLevel: ALL

  RemoteBrillianceSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt RemoteBrillianceAppSync.ApiId
      DefinitionS3Location: !Sub "s3://${RBS3Bucket}/schema.graphql"

  # Data Sources Association
  ActivityDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      Name: "ActivityDataSource"
      ApiId: !GetAtt RemoteBrillianceAppSync.ApiId
      DynamoDBConfig:
        TableName: !Ref Activity
        AwsRegion: !Ref "AWS::Region"
      ServiceRoleArn: !Sub ${AppSyncRole}
      Type: AMAZON_DYNAMODB

  JobDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      Name: "JobDataSource"
      ApiId: !GetAtt RemoteBrillianceAppSync.ApiId
      DynamoDBConfig:
        TableName: !Ref Job
        AwsRegion: !Ref "AWS::Region"
      ServiceRoleArn: !Sub ${AppSyncRole}
      Type: AMAZON_DYNAMODB

  UserDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      Name: "UserDataSource"
      ApiId: !GetAtt RemoteBrillianceAppSync.ApiId
      DynamoDBConfig:
        TableName: !Ref User
        AwsRegion: !Ref "AWS::Region"
      ServiceRoleArn: !Sub ${AppSyncRole}
      Type: AMAZON_DYNAMODB

  # AppSync Resolver
  # Activity
  AppSyncResolverCreateActivity:
    Type: "AWS::AppSync::Resolver"
    Properties:
      ApiId: !GetAtt RemoteBrillianceAppSync.ApiId
      TypeName: Mutation
      FieldName: createActivity
      DataSourceName: !GetAtt ActivityDataSource.Name
      RequestMappingTemplate: |
        {
            "version" : "2017-02-28",
            "operation" : "PutItem",
            "key" : {
                "id": $util.dynamodb.toDynamoDBJson($util.autoId()),
            },
            "attributeValues" : {
              "id": { "S" : "${context.arguments.input.id}" },
              "userId": { "S" : "${context.arguments.input.userId}" },
              "name": { "S" : "${context.arguments.input.name}" }
            }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  # this might be better in a lambda
  AppSyncResolverUpdateActivity:
    Type: "AWS::AppSync::Resolver"
    Properties:
      ApiId: !GetAtt RemoteBrillianceAppSync.ApiId
      TypeName: Mutation
      FieldName: updateActivity
      DataSourceName: !GetAtt ActivityDataSource.Name
      RequestMappingTemplate: |
        {
            "version" : "2017-02-28",
            "operation" : "UpdateItem",
            "key" : {
                "id": $util.dynamodb.toDynamoDBJson($ctx.args.id),
            },
            "update" : {
                "expression" : "SET title = :title, description = :description",
                "expressionValues": {
                    ":title" : { "S": "${context.arguments.title}"},
                    ":description" : { "S": "${context.arguments.description}"}
                }
            }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  AppSyncResolverDeleteActivity:
    Type: "AWS::AppSync::Resolver"
    Properties:
      ApiId: !GetAtt RemoteBrillianceAppSync.ApiId
      TypeName: Mutation
      FieldName: deleteActivity
      DataSourceName: !GetAtt ActivityDataSource.Name
      RequestMappingTemplate: |
        {
            "version" : "2017-02-28",
            "operation" : "DeleteItem",
            "key" : {
                "id" : { "S" : "${ctx.args.id}" }
            }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  AppSyncResolverGetActivity:
    Type: "AWS::AppSync::Resolver"
    Properties:
      ApiId: !GetAtt RemoteBrillianceAppSync.ApiId
      TypeName: Query
      FieldName: getActivity
      DataSourceName: !GetAtt ActivityDataSource.Name
      RequestMappingTemplate: |
        {
            "version" : "2017-02-28",
            "operation" : "Query",
            "query" : {
                "expression": "id = :id",
                "expressionValues" : {
                    ":id" : {
                        "S" : "${context.source.id}"
                    }
                }
            }
          }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  AppSyncResolverListActivities:
    Type: "AWS::AppSync::Resolver"
    Properties:
      ApiId: !GetAtt RemoteBrillianceAppSync.ApiId
      TypeName: Query
      FieldName: listActivities
      DataSourceName: !GetAtt ActivityDataSource.Name
      RequestMappingTemplate: |
        { "version" : "2017-02-28", "operation" : "Scan" }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  # Job
  AppSyncResolverCreateJob:
    Type: "AWS::AppSync::Resolver"
    Properties:
      ApiId: !GetAtt RemoteBrillianceAppSync.ApiId
      TypeName: Mutation
      FieldName: createJob
      DataSourceName: !GetAtt JobDataSource.Name
      RequestMappingTemplate: |
        {
            "version" : "2017-02-28",
            "operation" : "PutItem",
            "key" : {
                "id": $util.dynamodb.toDynamoDBJson($util.autoId()),
            },
            "attributeValues" : {
              "id": { "S" : "${context.arguments.input.id}" },
              "userId": { "S" : "${context.arguments.input.cognitoId}" },
              "name": { "S" : "${context.arguments.input.email}" }
            }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)
  # this might be better in a lambda
  AppSyncResolverUpdateJob:
    Type: "AWS::AppSync::Resolver"
    Properties:
      ApiId: !GetAtt RemoteBrillianceAppSync.ApiId
      TypeName: Mutation
      FieldName: updateJob
      DataSourceName: !GetAtt JobDataSource.Name
      RequestMappingTemplate: |
        {
            "version" : "2017-02-28",
            "operation" : "UpdateItem",
            "key" : {
                "id": $util.dynamodb.toDynamoDBJson($ctx.args.id),
            },
            "update" : {
                "expression" : "SET username = :username, email = :email",
                "expressionValues": {
                    ":title" : { "S": "${context.arguments.username}"},
                    ":email" : { "S": "${context.arguments.email}"}
                }
            }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  AppSyncResolverDeleteJob:
    Type: "AWS::AppSync::Resolver"
    Properties:
      ApiId: !GetAtt RemoteBrillianceAppSync.ApiId
      TypeName: Mutation
      FieldName: deleteJob
      DataSourceName: !GetAtt JobDataSource.Name
      RequestMappingTemplate: |
        {
            "version" : "2017-02-28",
            "operation" : "DeleteItem",
            "key" : {
                "id" : { "S" : "${ctx.args.id}" }
            }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  AppSyncResolverGetJob:
    Type: "AWS::AppSync::Resolver"
    Properties:
      ApiId: !GetAtt RemoteBrillianceAppSync.ApiId
      TypeName: Query
      FieldName: getJob
      DataSourceName: !GetAtt JobDataSource.Name
      RequestMappingTemplate: |
        {
            "version" : "2017-02-28",
            "operation" : "Query",
            "query" : {
                "expression": "id = :id",
                "expressionValues" : {
                    ":id" : {
                        "S" : "${context.source.id}"
                    }
                }
            }
          }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  AppSyncResolverListJobs:
    Type: "AWS::AppSync::Resolver"
    Properties:
      ApiId: !GetAtt RemoteBrillianceAppSync.ApiId
      TypeName: Query
      FieldName: listJobs
      DataSourceName: !GetAtt JobDataSource.Name
      RequestMappingTemplate: |
        { "version" : "2017-02-28", "operation" : "Scan" }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  # User
  AppSyncResolverCreateUser:
    Type: "AWS::AppSync::Resolver"
    Properties:
      ApiId: !GetAtt RemoteBrillianceAppSync.ApiId
      TypeName: Mutation
      FieldName: createUser
      DataSourceName: !GetAtt UserDataSource.Name
      RequestMappingTemplate: |
        {
            "version" : "2017-02-28",
            "operation" : "PutItem",
            "key" : {
                "id": $util.dynamodb.toDynamoDBJson($util.autoId()),
            },
            "attributeValues" : {
              "id": { "S" : "${context.arguments.input.id}" },
              "cognitoId": { "S" : "${context.arguments.input.cognitoid}" },
              "email": { "S" : "${context.arguments.input.email}" },
              "username": { "S" : "${context.arguments.input.username}" },
              "phone": { "S" : "${context.arguments.input.phone}" }
            }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)
  # this might be better in a lambda
  AppSyncResolverUpdateUser:
    Type: "AWS::AppSync::Resolver"
    Properties:
      ApiId: !GetAtt RemoteBrillianceAppSync.ApiId
      TypeName: Mutation
      FieldName: updateUser
      DataSourceName: !GetAtt UserDataSource.Name
      RequestMappingTemplate: |
        {
            "version" : "2017-02-28",
            "operation" : "UpdateItem",
            "key" : {
                "id": $util.dynamodb.toDynamoDBJson($ctx.args.id),
            },
            "update" : {
                "expression" : "SET title = :title, description = :description",
                "expressionValues": {
                    ":title" : { "S": "${context.arguments.title}"},
                    ":description" : { "S": "${context.arguments.description}"}
                }
            }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  AppSyncResolverDeleteUser:
    Type: "AWS::AppSync::Resolver"
    Properties:
      ApiId: !GetAtt RemoteBrillianceAppSync.ApiId
      TypeName: Mutation
      FieldName: deleteUser
      DataSourceName: !GetAtt UserDataSource.Name
      RequestMappingTemplate: |
        {
            "version" : "2017-02-28",
            "operation" : "DeleteItem",
            "key" : {
                "id" : { "S" : "${ctx.args.id}" }
            }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  AppSyncResolverGetUser:
    Type: "AWS::AppSync::Resolver"
    Properties:
      ApiId: !GetAtt RemoteBrillianceAppSync.ApiId
      TypeName: Query
      FieldName: getUser
      DataSourceName: !GetAtt UserDataSource.Name
      RequestMappingTemplate: |
        {
            "version" : "2017-02-28",
            "operation" : "Query",
            "query" : {
                "expression": "id = :id",
                "expressionValues" : {
                    ":id" : {
                        "S" : "${context.source.id}"
                    }
                }
            }
          }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  AppSyncResolverListUsers:
    Type: "AWS::AppSync::Resolver"
    Properties:
      ApiId: !GetAtt RemoteBrillianceAppSync.ApiId
      TypeName: Query
      FieldName: listUsers
      DataSourceName: !GetAtt UserDataSource.Name
      RequestMappingTemplate: |
        { "version" : "2017-02-28", "operation" : "Scan" }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

Outputs:
  GraphQLApiEndpoint:
    Description: The URL to the GraphQL Endpoint
    Value: !GetAtt RemoteBrillianceAppSync.GraphQLUrl
  GraphQLApiId:
    Description: The API ID of the GraphQL API
    Value: !GetAtt RemoteBrillianceAppSync.ApiId
