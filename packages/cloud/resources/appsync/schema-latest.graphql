
schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}
 type Query {
    # user 
  getUser(id: ID!): User
  listUsers(
    filter: TableUserFilterInput
    limit: Int
    nextToken: String
  ): UserConnection
}
 # UserEntity
type Mutation {
  createUser(input: CreateUserInput!): User
  deleteUser(input: DeleteUserInput!): User
  updateUser(input: UpdateUserInput!): User
}

type Subscription {
  onCreateUser(
    email: String
    firstName: String
    id: ID
    lastName: String
    phone: String
  ): User @aws_subscribe(mutations: ["createUser"])
  onDeleteUser(
    email: String
    firstName: String
    id: ID
    lastName: String
    phone: String
  ): User @aws_subscribe(mutations: ["deleteUser"])
  onUpdateUser(
    email: String
    firstName: String
    id: ID
    lastName: String
    phone: String
  ): User @aws_subscribe(mutations: ["updateUser"])
}
 # Entity Types
# [ ] JobSeeker
# 1. Profile 2. Applications
# [ ]  JobCreator
# 1. Profile 2. Jobs 3. Billing 4. Subscription
# [ ]   ContentCreator
# 1. Profile 2. Content 3. Activity
# [ ]  Activities
# Start User defs

type User {
  address: String
  cognitoId: ID!
  email: String
  firstName: String
  id: ID!
  lastName: String
  phone: String
  registered: Boolean
  username: String!

  # conversations(after: String, first: Int): UserConverstationsConnection
  # jobApplications(after: String, first: Int): JobApplicationsConnection
  # Get a users messages by querying a GSI on the Messages table.
  # messages(after: String, first: Int): MessageConnection# The username
}

type UserConnection {
  items: [User]
  nextToken: String
}

# End User defs
#  Job Seeker
type Job {
  title: String!
  category: String!
  type: String!
  isFullyRemote: String
  howtoApply: String
  description: String
  companyName: String
  companyHQ: String
  companyStatement: String
  logo: String
  companyWebsiteURL: String
  email: String
  companyDescription: String
} #
type JobApplication {
  id: ID!
}

type Address {
  id: ID!
  address1: String!
  address2: String
  city: String!
  state: String!
  zipCode: String!
  country: String
}

type JobSeekerProfile {
  Id: ID!
  userId: String!
  currentRole: String!
  summary: String
  experience: [String] # Experience TODO
  education: [String] # [Education]# TODO
  licenses: [String] # [Licenses]# TODO
  certifications: [String] # Certifications TODO
  recommendations: [String] # Recommendations TODO
  skills: [String] # Skills TODO
  endorsements: [String] # Endorsements TODO#
}
type Applications {
  Id: ID!
  JobSeekerid: String # to reference a FK do I use this
  JobId: String
  StartDate: String # DateTime
  EndDate: String # DateTime
}

type getJobSeeker {
  id: String
}

# Events
type Event {
  id: ID!
  name: String
  description: String
  status: EventStatus
  comments: [Comment]
}

type Comment {
  id: ID!
  content: String
}

# Enumeration
enum EventStatus {
  created
  open
  done
} # end of User Input definiton

input CreateUserInput {
  address: String
  cognitoId: ID!
  email: String
  firstName: String
  lastName: String
  phone: String
  registered: Boolean
  username: String!
}

input DeleteUserInput {
  id: ID!
}

input TableUserFilterInput {
  address: TableStringFilterInput
  cognitoId: TableIDFilterInput
  email: TableStringFilterInput
  firstName: TableStringFilterInput
  id: TableIDFilterInput
  lastName: TableStringFilterInput
  phone: TableStringFilterInput
  registered: TableBooleanFilterInput
  username: TableStringFilterInput
}

input UpdateUserInput {
  address: String
  cognitoId: ID
  email: String
  firstName: String
  id: ID!
  lastName: String
  phone: String
  registered: Boolean
  username: String
}

# generic filters

input TableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input TableFloatFilterInput {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}

input TableIDFilterInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input TableIntFilterInput {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input TableStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}
