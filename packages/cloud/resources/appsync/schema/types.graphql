# Entity Types
# [ ] JobSeeker
# 1. Profile 2. Applications
# [ ]  JobCreator
# 1. Profile 2. Jobs 3. Billing 4. Subscription
# [ ]   ContentCreator
# 1. Profile 2. Content 3. Activity
# [ ]  Activities
# Start User defs

type User {
  address: String
  cognitoId: ID!
  email: String
  firstName: String
  id: ID!
  lastName: String
  phone: String
  registered: Boolean
  username: String!
  workAddress: String

  # conversations(after: String, first: Int): UserConverstationsConnection
  # jobApplications(after: String, first: Int): JobApplicationsConnection
  # Get a users messages by querying a GSI on the Messages table.
  # messages(after: String, first: Int): MessageConnection# The username
}

type UserConnection {
  items: [User]
  nextToken: String
}

# End User defs
#  Job Seeker
type Job {
  title: String!
  category: String!
  type: String!
  isFullyRemote: String
  howtoApply: String
  description: String
  companyName: String
  companyHQ: String
  companyStatement: String
  logo: String
  companyWebsiteURL: String
  email: String
  companyDescription: String
} #
type JobApplication {
  id: ID!
}

type Address {
  id: ID!
  address1: String!
  address2: String
  city: String!
  state: String!
  zipCode: String!
  country: String
}

type JobSeekerProfile {
  Id: ID!
  userId: String!
  currentRole: String!
  summary: String
  experience: [String] # Experience TODO
  education: [String] # [Education]# TODO
  licenses: [String] # [Licenses]# TODO
  certifications: [String] # Certifications TODO
  recommendations: [String] # Recommendations TODO
  skills: [String] # Skills TODO
  endorsements: [String] # Endorsements TODO#
}
type Applications {
  Id: ID!
  JobSeekerid: String # to reference a FK do I use this
  JobId: String
  StartDate: String # DateTime
  EndDate: String # DateTime
}

type getJobSeeker {
  id: String
}

# Events
type Event {
  id: ID!
  name: String
  description: String
  status: EventStatus
  comments: [Comment]
}

type Comment {
  id: ID!
  content: String
}

# Enumeration
enum EventStatus {
  created
  open
  done
}